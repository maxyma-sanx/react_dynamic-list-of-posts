{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","context/PostContext.tsx","api/userAPI.tsx","components/NewCommentForm/NewCommentForm.tsx","api/commentAPI.tsx","components/CommentItem/CommentItem.tsx","components/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","components/UserItem/UserItem.tsx","components/UserSelector/UserSelector.tsx","components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","App.tsx","api/postAPI.tsx","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","PostContext","React","createContext","users","setUsers","posts","setPosts","comments","setComments","selectedUser","setSelectedUser","selectedPost","setSelectedPost","errorMessage","setErrorMessage","dropdown","setDropdown","PostProvider","children","useState","useEffect","catch","value","useMemo","Provider","NewCommentForm","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","text","setText","textError","setTextError","loading","setLoading","useContext","onSubmit","event","preventDefault","comment","newComment","postId","id","currentComments","finally","htmlFor","type","placeholder","classNames","onChange","target","onClick","CommentItem","href","commentId","filter","currentComment","PostDetails","isFormShow","setIsFormShow","title","length","map","Sidebar","UserItem","user","UserSelector","onDropdownClick","window","addEventListener","removeEventListener","role","PostItem","post","isCurrentPostSelected","PostsList","App","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e0eda3d.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, {\n  ReactNode,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { User } from '../types/User';\nimport * as userAPI from '../api/userAPI';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype ProviderProps = {\n  children: ReactNode;\n};\n\ntype ContextProps = {\n  users: User[];\n  setUsers: (users: User[]) => void;\n  posts: Post[];\n  setPosts: (posts: Post[]) => void;\n  comments: Comment[];\n  setComments: (\n    comments: Comment[] | ((comments: Comment[]) => Comment[])\n  ) => void;\n  selectedUser: User | null;\n  setSelectedUser: (user: User | null) => void;\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n  errorMessage: string;\n  setErrorMessage: (message: string) => void;\n  dropdown: boolean,\n  setDropdown: (value: boolean) => void,\n};\n\nexport const PostContext = React.createContext<ContextProps>({\n  users: [],\n  setUsers: () => { },\n  posts: [],\n  setPosts: () => { },\n  comments: [],\n  setComments: () => { },\n  selectedUser: null,\n  setSelectedUser: () => { },\n  selectedPost: null,\n  setSelectedPost: () => { },\n  errorMessage: '',\n  setErrorMessage: () => { },\n  dropdown: false,\n  setDropdown: () => { },\n});\n\nexport const PostProvider: React.FC<ProviderProps> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [dropdown, setDropdown] = useState(false);\n\n  useEffect(() => {\n    userAPI.getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setErrorMessage('Something went wrong!');\n      });\n  }, []);\n\n  const value = useMemo(() => {\n    return {\n      users,\n      setUsers,\n      posts,\n      setPosts,\n      comments,\n      setComments,\n      selectedUser,\n      setSelectedUser,\n      selectedPost,\n      setSelectedPost,\n      errorMessage,\n      setErrorMessage,\n      dropdown,\n      setDropdown,\n    };\n  }, [\n    users,\n    posts,\n    comments,\n    selectedUser,\n    selectedPost,\n    errorMessage,\n    dropdown,\n  ]);\n\n  return (\n    <PostContext.Provider value={value}>\n      {children}\n    </PostContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import classNames from 'classnames';\nimport { useContext, useState } from 'react';\nimport * as commentAPI from '../../api/commentAPI';\nimport { PostContext } from '../../context/PostContext';\nimport { Comment } from '../../types/Comment';\n\nexport const NewCommentForm: React.FC = () => {\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [text, setText] = useState('');\n  const [textError, setTextError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const {\n    selectedPost,\n    setComments,\n    setErrorMessage,\n  } = useContext(PostContext);\n\n  const allReset = () => {\n    setName('');\n    setNameError(false);\n    setEmail('');\n    setEmailError(false);\n    setText('');\n    setTextError(false);\n  };\n\n  const successReset = () => {\n    setText('');\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!name) {\n      setNameError(true);\n    }\n\n    if (!email) {\n      setEmailError(true);\n    }\n\n    if (!text) {\n      setTextError(true);\n    }\n\n    if (!name || !email || !text) {\n      return;\n    }\n\n    setLoading(true);\n\n    const newComment = {\n      postId: selectedPost?.id,\n      name,\n      email,\n      body: text,\n    };\n\n    commentAPI.createComment(newComment as Comment)\n      .then(comment => setComments(\n        currentComments => [...currentComments, comment],\n      ))\n      .catch(() => setErrorMessage('Something went wrong!'))\n      .finally(() => setLoading(false));\n\n    successReset();\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': nameError,\n            })}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': emailError,\n            })}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': textError,\n            })}\n            value={text}\n            onChange={(event) => {\n              setText(event.target.value);\n              setTextError(false);\n            }}\n          />\n        </div>\n\n        {textError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': loading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={allReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { useContext } from 'react';\nimport { Comment } from '../../types/Comment';\nimport * as commentAPI from '../../api/commentAPI';\nimport { PostContext } from '../../context/PostContext';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment }) => {\n  const { setComments, setErrorMessage } = useContext(PostContext);\n\n  const deleteComment = () => {\n    setComments(currentComments => currentComments\n      .filter(currentComment => currentComment.id !== comment.id));\n\n    commentAPI.removeComment(comment.id)\n      .catch(() => setErrorMessage('Something went wrong'));\n  };\n\n  return (\n    <article\n      key={comment.id}\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={deleteComment}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostContext } from '../../context/PostContext';\nimport * as commentAPI from '../../api/commentAPI';\nimport { CommentItem } from '../CommentItem';\n\nexport const PostDetails: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [isFormShow, setIsFormShow] = useState(false);\n\n  const {\n    comments,\n    setComments,\n    selectedPost,\n    errorMessage,\n    setErrorMessage,\n  } = useContext(PostContext);\n\n  useEffect(() => {\n    if (!selectedPost) {\n      return;\n    }\n\n    setLoading(true);\n    setIsFormShow(false);\n\n    commentAPI.getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setErrorMessage('Something went wrong'))\n      .finally(() => setLoading(false));\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && <Loader />}\n\n          {errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!errorMessage && !loading && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!loading && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <CommentItem key={comment.id} comment={comment} />\n              ))}\n            </>\n          )}\n\n          {!errorMessage && !loading && !isFormShow && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormShow(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShow && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useContext } from 'react';\nimport { PostDetails } from '../PostDetails';\nimport { PostContext } from '../../context/PostContext';\n\nexport const Sidebar = () => {\n  const { selectedPost } = useContext(PostContext);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': selectedPost },\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        {selectedPost && <PostDetails />}\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\n\nimport classNames from 'classnames';\n\nimport { User } from '../../types/User';\nimport { PostContext } from '../../context/PostContext';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserItem: React.FC<Props> = ({ user }) => {\n  const {\n    selectedUser,\n    setSelectedUser,\n    setDropdown,\n    setSelectedPost,\n  } = useContext(PostContext);\n\n  return (\n    <a\n      href=\"#user-1\"\n      className={classNames('dropdown-item', {\n        'is-active': user.id === selectedUser?.id,\n      })}\n      onClick={() => {\n        setSelectedPost(null);\n        setSelectedUser(user);\n        setDropdown(false);\n      }}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import { useContext, useEffect } from 'react';\n\nimport classNames from 'classnames';\n\nimport { PostContext } from '../../context/PostContext';\nimport { UserItem } from '../UserItem';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    selectedUser,\n    dropdown,\n    setDropdown,\n  } = useContext(PostContext);\n\n  const onDropdownClick = () => {\n    setDropdown(false);\n  };\n\n  useEffect(() => {\n    if (dropdown) {\n      window.addEventListener('click', onDropdownClick);\n    }\n\n    return () => {\n      window.removeEventListener('click', onDropdownClick);\n    };\n  }, [dropdown]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropdown,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdown(true)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <UserItem key={user.id} user={user} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/Post';\nimport { PostContext } from '../../context/PostContext';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostItem: React.FC<Props> = ({ post }) => {\n  const { selectedPost, setSelectedPost } = useContext(PostContext);\n\n  const isCurrentPostSelected = selectedPost && selectedPost.id === post.id;\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button is-link', {\n            'is-light': !isCurrentPostSelected,\n          })}\n          onClick={() => {\n            if (isCurrentPostSelected) {\n              setSelectedPost(null);\n            } else {\n              setSelectedPost(post);\n            }\n          }}\n        >\n          {isCurrentPostSelected ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { useContext } from 'react';\n\nimport { PostContext } from '../../context/PostContext';\nimport { PostItem } from '../PostItem';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts,\n  } = useContext(PostContext);\n\n  return (\n    (\n      <div data-cy=\"PostsList\">\n        <p className=\"title\">Posts:</p>\n\n        <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n          <thead>\n            <tr className=\"has-background-link-light\">\n              <th>#</th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {posts.map(post => (\n              <PostItem key={post.id} post={post} />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { Loader } from './components/Loader';\nimport { Sidebar } from './components/Sidebar';\nimport { UserSelector } from './components/UserSelector';\nimport { PostsList } from './components/PostsList';\nimport { PostContext } from './context/PostContext';\nimport * as postAPI from './api/postAPI';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n\n  const {\n    posts,\n    selectedUser,\n    errorMessage,\n    setErrorMessage,\n    setPosts,\n  } = useContext(PostContext);\n\n  useEffect(() => {\n    if (!selectedUser) {\n      return;\n    }\n\n    setLoading(true);\n\n    postAPI.getPosts(selectedUser.id)\n      .then(setPosts)\n      .catch(() => setErrorMessage('Something went wrong!'))\n      .finally(() => setLoading(false));\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !errorMessage && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading ? <Loader /> : (\n                  <>\n                    {errorMessage && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        {errorMessage}\n                      </div>\n                    )}\n\n                    {!errorMessage && selectedUser && posts.length === 0 && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    {posts.length > 0 && <PostsList />}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <Sidebar />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { PostProvider } from './context/PostContext';\n\nReactDOM.render(\n  <PostProvider>\n    <App />\n  </PostProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}